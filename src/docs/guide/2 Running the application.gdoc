h3. Building the jar

The first step is to run the [build-standalone|Scripts] script, e.g.

{code:java}
grails prod build-standalone
{code}

or

{code:java}
grails -Dgrails.env=demo build-standalone our_cool_demo.jar
{code}

If you pass the \-\-jetty flag the embedded server will be Jetty instead of the default Tomcat, for example

{code:java}
grails prod build-standalone --jetty
{code}

or

{code:java}
grails -Dgrails.env=demo build-standalone our_cool_demo.jar --jetty
{code}

You can change the default embedded server to Jetty by adding this to BuildConfig.groovy:

{code}
grails.plugin.standalone.useJetty = true
{code}

If you've set Jetty to the default, you can force a Tomcat build later with the \-\-tomcat flag:

{code}
grails build-standalone --tomcat
{code}

h4. Build Configuration

There are several configuration settings that you can use to change how the jar is built; add any of these to BuildConfig.groovy to override the defaults:

{table}
*Property* | *Default Value* | *Meaning*
grails.plugin.standalone. ecjDependency | 'org.eclipse.jdt.core.compiler:ecj:3.7.1' | the dependency config for the ECJ jar
grails.plugin.standalone. extraDependencies | none | extra dependency jars to include in the standalone jar
grails.plugin.standalone. ivyLogLevel | 'warn' | the Ivy log level
grails.plugin.standalone. jettyServletApiDependency | 'javax.servlet:servlet-api:2.5' or 'javax.servlet:javax.servlet-api:3.0.1' | the Jetty servlet API jar dependency
grails.plugin.standalone. jettyVersion | '7.6.0.v20120127' | the version of Jetty to use
grails.plugin.standalone. tomcatVersion | '7.0.39' | the version of Tomcat to use
grails.plugin.standalone. tomcatDependencies | 'tomcat-annotations-api', 'tomcat-api', 'tomcat-catalina-ant', 'tomcat-catalina', 'tomcat-coyote', 'tomcat-juli', 'tomcat-servlet-api', 'tomcat-util' | the Tomcat jars to use
grails.plugin.standalone. tomcatEmbedDependencies | 'tomcat-embed-core', 'tomcat-embed-jasper', 'tomcat-embed-logging-juli', 'tomcat-embed-logging-log4j' | the Tomcat embed jars to use
grails.plugin.standalone. mainClass | none | Optionally specify a custom main class to include in the MANIFEST.MF. Note that you will then be required to call either grails.plugin.standalone.JettyLauncher or grails.plugin.standalone.Launcher yourself
{table}

h3. Running the server

As long as the target machine has Java 5 or higher available, all you need to do next is run

{code:java}
java -jar /path/to/jar_name.jar
{code}

There are several arguments you can pass to customize how the application runs, using @name=value@ syntax:
# @context@, the context name; if not specified it defaults to "" (the "root" context)
# @host@, the host name; if not specified it defaults to "localhost"
# @port@, the HTTP port; if not specified it defaults to 8080
# @httpsPort@, the HTTPS port; there is no default for this, but if specified you can also specify the keystore path and password
# @keystorePath@ or @javax.net.ssl.keyStore@, the SSL keystore path; if not specified a temporary keystore will be generated
# @keystorePassword@ or @javax.net.ssl.keyStorePassword@, the SSL keystore password; required if an existing keystore path is specified
# @truststorePath@ or @javax.net.ssl.trustStore@, the SSL truststore path
# @trustStorePassword@ or @javax.net.ssl.trustStorePassword@, the SSL truststore password; required if an existing truststore path is specified
# @enableClientAuth@, whether to enable client auth, defaults to false
# @workDir@, the working directory where the war file is extracted, defaults to the system temp directory
# @enableCompression@, whether to enable compression (Tomcat only)
# @compressableMimeTypes@, a comma separated list of MIME types for which HTTP compression may be used; defaults to the Tomcat defaults, @"text/html,text/xml,text/plain"@
# @sessionTimeout@, the session timeout in minutes; defaults to 30
# @nio@ or @tomcat.nio@, whether to use NIO; defaults to true

In addition, if you specify a value that is the name of a system property (e.g. 'home.dir'), the system property value will be used.

For example running

{code:java}
java -jar /path/to/jar_name.jar
{code}

will start a server at @http://localhost:8080/@ and

{code:java}
java -jar /path/to/jar_name.jar context=cool_demo port=9000
{code}

will start a server at @http://localhost:9000/cool_demo@

{code:java}
java -jar /path/to/jar_name.jar context=cool_demo port=8080 httpsPort=8443
{code}

will start a server at @http://localhost:8080/cool_demo@ and will also support SSL at @https://localhost:8443/cool_demo@
